{"version":3,"sources":["NameAgeForm.js","FileUploadForm.js","App.js","reportWebVitals.js","index.js"],"names":["NameAgeForm","name","setName","useState","age","setAge","navigate","useNavigate","React","createElement","className","onSubmit","e","preventDefault","state","type","placeholder","value","onChange","target","required","FileUploadForm","useLocation","selectedBlock","setSelectedBlock","audio","setAudio","isRecording","setIsRecording","audioURL","setAudioURL","mediaRecorderRef","useRef","blocks","id","title","paragraph","handleAudioRecord","current","stop","navigator","mediaDevices","getUserMedia","then","stream","mediaRecorder","MediaRecorder","start","audioChunks","addEventListener","event","push","data","audioBlob","Blob","audioFile","File","URL","createObjectURL","map","block","key","onClick","handleBlockClick","Fragment","src","controls","handleReRecord","async","formData","FormData","append","response","fetch","method","body","result","json","console","log","alert","audio_url","disabled","App","Router","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"0MAyCeA,MArCf,WACE,MAAOC,EAAMC,GAAWC,mBAAS,KAC1BC,EAAKC,GAAUF,mBAAS,IACzBG,EAAWC,cAOjB,OACEC,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAAA,OAAKC,UAAU,gBAAoB,KACnCF,IAAAC,cAAA,OAAKC,UAAU,aACbF,IAAAC,cAAA,UAAI,2BACJD,IAAAC,cAAA,QAAME,SAVUC,IACpBA,EAAEC,iBACFP,EAAS,UAAW,CAAEQ,MAAO,CAAEb,OAAMG,WAS/BI,IAAAC,cAAA,SACEM,KAAK,OACLC,YAAY,kBACZC,MAAOhB,EACPiB,SAAWN,GAAMV,EAAQU,EAAEO,OAAOF,OAClCG,UAAQ,IAEVZ,IAAAC,cAAA,SACEM,KAAK,SACLC,YAAY,iBACZC,MAAOb,EACPc,SAAWN,GAAMP,EAAOO,EAAEO,OAAOF,OACjCG,UAAQ,IAEVZ,IAAAC,cAAA,UAAQM,KAAK,UAAS,YCkFjBM,MAjHf,WACE,MAAMP,MAAEA,GAAUQ,eACXC,EAAeC,GAAoBrB,mBAAS,IAC5CsB,EAAOC,GAAYvB,mBAAS,OAC5BwB,EAAaC,GAAkBzB,oBAAS,IACxC0B,EAAUC,GAAe3B,mBAAS,IACnC4B,EAAmBC,iBAAO,MAE1BC,EAAS,CACb,CAAEC,GAAI,EAAGC,MAAO,UAAWC,UAAW,sCACtC,CAAEF,GAAI,EAAGC,MAAO,UAAWC,UAAW,sCACtC,CAAEF,GAAI,EAAGC,MAAO,UAAWC,UAAW,uCAOlCC,EAAoBA,KACnBV,GAsBHI,EAAiBO,QAAQC,OACzBX,GAAe,IAtBfY,UAAUC,aAAaC,aAAa,CAAEjB,OAAO,IAC1CkB,KAAMC,IACL,MAAMC,EAAgB,IAAIC,cAAcF,GACxCb,EAAiBO,QAAUO,EAC3BA,EAAcE,QACdnB,GAAe,GAEf,IAAIoB,EAAc,GAClBH,EAAcI,iBAAiB,gBAAkBC,IAC/CF,EAAYG,KAAKD,EAAME,QAGzBP,EAAcI,iBAAiB,OAAQ,KACrC,MAAMI,EAAY,IAAIC,KAAKN,EAAa,CAAEjC,KAAM,eAC1CwC,EAAY,IAAIC,KAAK,CAACH,GAAY,YAAa,CAAEtC,KAAM,eAC7DW,EAAS6B,GACTzB,EAAY2B,IAAIC,gBAAgBL,IAChCzB,GAAe,QAiCzB,OACEpB,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAAA,OAAKC,UAAU,gBACfF,IAAAC,cAAA,OAAKC,UAAU,aACbF,IAAAC,cAAA,OAAKC,UAAU,gBACbF,IAAAC,cAAA,UAAI,kBACHwB,EAAO0B,IAAKC,GACXpD,IAAAC,cAAA,OACEoD,IAAKD,EAAM1B,GACXxB,mBAAoBa,IAAkBqC,EAAM1B,GAAK,WAAa,KAC9D4B,QAASA,IAlEK5B,KACxBV,EAAiBU,IAiEQ6B,CAAiBH,EAAM1B,KAErC0B,EAAMzB,SAKb3B,IAAAC,cAAA,OAAKC,UAAU,WACbF,IAAAC,cAAA,UAAKwB,EAAOV,GAAeY,OAC3B3B,IAAAC,cAAA,SAAIwB,EAAOV,GAAea,WAE1B5B,IAAAC,cAAA,OAAKC,UAAU,kBACZmB,EACCrB,IAAAC,cAAAD,IAAAwD,SAAA,KACExD,IAAAC,cAAA,SAAOwD,IAAKpC,EAAUqC,UAAQ,IAC9B1D,IAAAC,cAAA,UAAQqD,QAjDCK,KACrBzC,EAAS,MACTI,EAAY,IACZO,MA8C6C,cAGnC7B,IAAAC,cAAA,UAAQqD,QAASzB,GACdV,EAAc,iBAAmB,iBAKxCnB,IAAAC,cAAA,QAAME,SApDOyD,UACnBxD,EAAEC,iBAEF,MAAMwD,EAAW,IAAIC,SACrBD,EAASE,OAAO,OAAQzD,EAAMb,MAC9BoE,EAASE,OAAO,MAAOzD,EAAMV,KAC7BiE,EAASE,OAAO,QAAS9C,GAEzB,MAAM+C,QAAiBC,MAAM,gCAAiC,CAC5DC,OAAQ,OACRC,KAAMN,IAGFO,QAAeJ,EAASK,OAC9BC,QAAQC,IAAIH,GACZI,2CAA2CJ,EAAOK,eAsC1CzE,IAAAC,cAAA,UAAQM,KAAK,SAASmE,UAAWzD,GAAO,eC1FrC0D,MAXf,WACE,OACE3E,IAAAC,cAAC2E,IAAM,KACL5E,IAAAC,cAAC4E,IAAM,KACL7E,IAAAC,cAAC6E,IAAK,CAACC,KAAK,IAAIC,QAAShF,IAAAC,cAACT,EAAW,QACrCQ,IAAAC,cAAC6E,IAAK,CAACC,KAAK,UAAUC,QAAShF,IAAAC,cAACY,EAAc,WCAvCoE,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAAhF,EAAA,GAAA+B,KAAAiD,EAAAC,KAAA,UAAqBlD,KAAKmD,IAAiD,IAAhDC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASL,EACpEC,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,MCDDU,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHhG,IAAAC,cAACD,IAAMiG,WAAU,KACfjG,IAAAC,cAAC0E,EAAG,QAORM","file":"static/js/main.347b061b.chunk.js","sourcesContent":["// src/NameAgeForm.js\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nfunction NameAgeForm() {\n  const [name, setName] = useState('');\n  const [age, setAge] = useState('');\n  const navigate = useNavigate();\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    navigate('/upload', { state: { name, age } });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"gradient-bg\"></div>  {/* Gradient background */}\n      <div className=\"container\">\n        <h1>Enter Your Name and Age</h1>\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            placeholder=\"Enter your name\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n            required\n          />\n          <input\n            type=\"number\"\n            placeholder=\"Enter your age\"\n            value={age}\n            onChange={(e) => setAge(e.target.value)}\n            required\n          />\n          <button type=\"submit\">Next</button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default NameAgeForm;\n","import React, { useState, useRef } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nfunction FileUploadForm() {\n  const { state } = useLocation(); // Corrected to use useLocation to get state\n  const [selectedBlock, setSelectedBlock] = useState(0);  // Track selected block\n  const [audio, setAudio] = useState(null);  // Store the recorded audio file\n  const [isRecording, setIsRecording] = useState(false);  // Track recording state\n  const [audioURL, setAudioURL] = useState(\"\");  // URL for the recorded audio\n  const mediaRecorderRef = useRef(null);  // MediaRecorder for recording audio\n\n  const blocks = [\n    { id: 0, title: 'Block 1', paragraph: 'This is the paragraph for block 1.' },\n    { id: 1, title: 'Block 2', paragraph: 'This is the paragraph for block 2.' },\n    { id: 2, title: 'Block 3', paragraph: 'This is the paragraph for block 3.' },\n  ];\n\n  const handleBlockClick = (id) => {\n    setSelectedBlock(id);\n  };\n\n  const handleAudioRecord = () => {\n    if (!isRecording) {\n      navigator.mediaDevices.getUserMedia({ audio: true })\n        .then((stream) => {\n          const mediaRecorder = new MediaRecorder(stream);\n          mediaRecorderRef.current = mediaRecorder;\n          mediaRecorder.start();\n          setIsRecording(true);\n\n          let audioChunks = [];\n          mediaRecorder.addEventListener('dataavailable', (event) => {\n            audioChunks.push(event.data);\n          });\n\n          mediaRecorder.addEventListener('stop', () => {\n            const audioBlob = new Blob(audioChunks, { type: 'audio/mpeg' });\n            const audioFile = new File([audioBlob], 'audio.mp3', { type: 'audio/mpeg' });\n            setAudio(audioFile);\n            setAudioURL(URL.createObjectURL(audioBlob));\n            setIsRecording(false);\n          });\n        });\n    } else {\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n    }\n  };\n\n  const handleReRecord = () => {\n    setAudio(null);\n    setAudioURL(\"\");\n    handleAudioRecord();  // Restart recording\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const formData = new FormData();\n    formData.append('name', state.name);\n    formData.append('age', state.age);\n    formData.append('audio', audio);\n\n    const response = await fetch('http://localhost:8000/upload/', {\n      method: 'POST',\n      body: formData\n    });\n\n    const result = await response.json();\n    console.log(result);\n    alert(`Uploaded successfully: Audio URL: ${result.audio_url}`);\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"gradient-bg\"></div>\n      <div className=\"container\">\n        <div className=\"left-sidebar\">\n          <h2>Select a Block</h2>\n          {blocks.map((block) => (\n            <div\n              key={block.id}\n              className={`block ${selectedBlock === block.id ? 'selected' : ''}`}\n              onClick={() => handleBlockClick(block.id)}\n            >\n              {block.title}\n            </div>\n          ))}\n        </div>\n        \n        <div className=\"content\">\n          <h1>{blocks[selectedBlock].title}</h1>\n          <p>{blocks[selectedBlock].paragraph}</p>\n          \n          <div className=\"audio-controls\">\n            {audioURL ? (\n              <>\n                <audio src={audioURL} controls />\n                <button onClick={handleReRecord}>Re-record</button>\n              </>\n            ) : (\n              <button onClick={handleAudioRecord}>\n                {isRecording ? 'Stop Recording' : 'Record Voice'}\n              </button>\n            )}\n          </div>\n\n          <form onSubmit={handleSubmit}>\n            <button type=\"submit\" disabled={!audio}>Upload</button>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default FileUploadForm;\n","// src/App.js\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport './App.css';\nimport NameAgeForm from './NameAgeForm';  // Import the NameAgeForm component\nimport FileUploadForm from './FileUploadForm';  // Import the FileUploadForm component\n\nfunction App() {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<NameAgeForm />} />\n        <Route path=\"/upload\" element={<FileUploadForm />} />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}