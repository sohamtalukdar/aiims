{"ast":null,"code":"const [isPatient, setIsPatient] = useState(true); // Default to true\nconst {\n  state\n} = useLocation();\nconst [showModal, setShowModal] = useState(true);\nconst [selectedTab, setSelectedTab] = useState(0);\nconst [language, setLanguage] = useState('english'); // Default to English\nconst [isRecording, setIsRecording] = useState(false);\nconst [mediaURL, setMediaURL] = useState(\"\");\nconst [showTick, setShowTick] = useState(false);\nconst mediaRecorderRef = useRef(null);\nconst mediaChunksRef = useRef([]);\nconst [showImageModal, setShowImageModal] = useState(false);\nconst [showInitialPopup, setShowInitialPopup] = useState(true); // New state variable\nconst [countdown, setCountdown] = useState(60);\nconst [completedTasks, setCompletedTasks] = useState(new Set());\nconst [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\nconst [showInitialInstructions, setShowInitialInstructions] = useState(false);\nconst [testCompleted, setTestCompleted] = useState(false);\nconst [audioBlob, setAudioBlob] = useState(null);\nconst [videoBlob, setVideoBlob] = useState(null);\nconst [showRefreshWarning, setShowRefreshWarning] = useState(false);\nconst [allSelectedAnswers, setAllSelectedAnswers] = useState(() => {\n  const savedData = sessionStorage.getItem(\"allSelectedAnswers\");\n  return savedData ? JSON.parse(savedData) : {};\n});\nexport default states;","map":{"version":3,"names":["isPatient","setIsPatient","useState","state","useLocation","showModal","setShowModal","selectedTab","setSelectedTab","language","setLanguage","isRecording","setIsRecording","mediaURL","setMediaURL","showTick","setShowTick","mediaRecorderRef","useRef","mediaChunksRef","showImageModal","setShowImageModal","showInitialPopup","setShowInitialPopup","countdown","setCountdown","completedTasks","setCompletedTasks","Set","currentQuestionIndex","setCurrentQuestionIndex","showInitialInstructions","setShowInitialInstructions","testCompleted","setTestCompleted","audioBlob","setAudioBlob","videoBlob","setVideoBlob","showRefreshWarning","setShowRefreshWarning","allSelectedAnswers","setAllSelectedAnswers","savedData","sessionStorage","getItem","JSON","parse","states"],"sources":["/Users/sohamtalukdar/aiims/my-app/src/data/states.js"],"sourcesContent":["const [isPatient, setIsPatient] = useState(true); // Default to true\n  const { state } = useLocation();\n  const [showModal, setShowModal] = useState(true);\n  const [selectedTab, setSelectedTab] = useState(0);\n  const [language, setLanguage] = useState('english'); // Default to English\n  const [isRecording, setIsRecording] = useState(false);\n  const [mediaURL, setMediaURL] = useState(\"\");\n  const [showTick, setShowTick] = useState(false);\n  const mediaRecorderRef = useRef(null);\n  const mediaChunksRef = useRef([]);\n  const [showImageModal, setShowImageModal] = useState(false);\n  const [showInitialPopup, setShowInitialPopup] = useState(true); // New state variable\n  const [countdown, setCountdown] = useState(60);\n  const [completedTasks, setCompletedTasks] = useState(new Set());\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [showInitialInstructions, setShowInitialInstructions] = useState(false);\n  const [testCompleted, setTestCompleted] = useState(false);\n  const [audioBlob, setAudioBlob] = useState(null);\n  const [videoBlob, setVideoBlob] = useState(null);\n  const [showRefreshWarning, setShowRefreshWarning] = useState(false);\n  const [allSelectedAnswers, setAllSelectedAnswers] = useState(() => {\n    const savedData = sessionStorage.getItem(\"allSelectedAnswers\");\n    return savedData ? JSON.parse(savedData) : {};\n});\n\nexport default states;"],"mappings":"AAAA,MAAM,CAACA,SAAS,EAAEC,YAAY,CAAC,GAAGC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;AAChD,MAAM;EAAEC;AAAM,CAAC,GAAGC,WAAW,CAAC,CAAC;AAC/B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGJ,QAAQ,CAAC,IAAI,CAAC;AAChD,MAAM,CAACK,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;AACjD,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;AACrD,MAAM,CAACS,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;AACrD,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;AAC5C,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;AAC/C,MAAMe,gBAAgB,GAAGC,MAAM,CAAC,IAAI,CAAC;AACrC,MAAMC,cAAc,GAAGD,MAAM,CAAC,EAAE,CAAC;AACjC,MAAM,CAACE,cAAc,EAAEC,iBAAiB,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;AAC3D,MAAM,CAACoB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;AAChE,MAAM,CAACsB,SAAS,EAAEC,YAAY,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;AAC9C,MAAM,CAACwB,cAAc,EAAEC,iBAAiB,CAAC,GAAGzB,QAAQ,CAAC,IAAI0B,GAAG,CAAC,CAAC,CAAC;AAC/D,MAAM,CAACC,oBAAoB,EAAEC,uBAAuB,CAAC,GAAG5B,QAAQ,CAAC,CAAC,CAAC;AACnE,MAAM,CAAC6B,uBAAuB,EAAEC,0BAA0B,CAAC,GAAG9B,QAAQ,CAAC,KAAK,CAAC;AAC7E,MAAM,CAAC+B,aAAa,EAAEC,gBAAgB,CAAC,GAAGhC,QAAQ,CAAC,KAAK,CAAC;AACzD,MAAM,CAACiC,SAAS,EAAEC,YAAY,CAAC,GAAGlC,QAAQ,CAAC,IAAI,CAAC;AAChD,MAAM,CAACmC,SAAS,EAAEC,YAAY,CAAC,GAAGpC,QAAQ,CAAC,IAAI,CAAC;AAChD,MAAM,CAACqC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGtC,QAAQ,CAAC,KAAK,CAAC;AACnE,MAAM,CAACuC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGxC,QAAQ,CAAC,MAAM;EACjE,MAAMyC,SAAS,GAAGC,cAAc,CAACC,OAAO,CAAC,oBAAoB,CAAC;EAC9D,OAAOF,SAAS,GAAGG,IAAI,CAACC,KAAK,CAACJ,SAAS,CAAC,GAAG,CAAC,CAAC;AACjD,CAAC,CAAC;AAEF,eAAeK,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}