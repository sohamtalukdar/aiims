{"ast":null,"code":"import { calculateScore } from './scoreUtils';\nimport config from './config.json';\nconst handleSubmit = async ({\n  e,\n  isSubmitting,\n  setIsSubmitting,\n  state,\n  navigate,\n  selectedTab,\n  allSelectedAnswers,\n  videoBlob,\n  audioBlob,\n  setShowTick,\n  setCompletedTasks,\n  tasks,\n  handleTabClick,\n  setMediaURL,\n  setVideoBlob,\n  setAudioBlob\n}) => {\n  e.preventDefault();\n  if (isSubmitting) {\n    console.log('Already submitting, returning');\n    return;\n  }\n  console.log('Starting submission for tab:', selectedTab);\n  setIsSubmitting(true);\n  try {\n    if (!(state !== null && state !== void 0 && state.patientId) || !(state !== null && state !== void 0 && state.name) || !(state !== null && state !== void 0 && state.age)) {\n      alert('Patient information is missing. Please start over.');\n      navigate('/');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('name', state.name);\n    formData.append('age', state.age);\n    formData.append('patientId', state.patientId);\n\n    // Initialize score as 0\n    let scoreToSend = '0';\n\n    // Only calculate score for MMSE test (tab 2)\n    if (selectedTab === 2) {\n      const calculatedScore = calculateScore(allSelectedAnswers);\n      console.log('Tab 2: Calculated score:', calculatedScore);\n      scoreToSend = calculatedScore.toString();\n    } else {\n      console.log(`Tab ${selectedTab}: Using default score: 0`);\n    }\n    console.log('Setting score in formData:', scoreToSend);\n    formData.append('score', scoreToSend);\n\n    // Log all form data being sent\n    console.log('Form data contents:');\n    for (let pair of formData.entries()) {\n      console.log(`${pair[0]}: ${pair[1]}`);\n    }\n    const currentBlob = selectedTab === 1 ? videoBlob : audioBlob;\n    if (!currentBlob) {\n      alert(`Please record ${selectedTab === 1 ? 'video' : 'audio'} before submitting.`);\n      setIsSubmitting(false);\n      return;\n    }\n    if (selectedTab === 1) {\n      formData.append('video', currentBlob, 'video.webm');\n    } else if (selectedTab === 0) {\n      formData.append('audio', currentBlob, 'audio.webm');\n    }\n    console.log('Sending request to server...');\n    const response = await fetch(`${config.base_url}/save`, {\n      method: 'POST',\n      body: formData\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || 'Upload failed');\n    }\n    const result = await response.json();\n    console.log('Server response:', result);\n    setShowTick(true);\n    setTimeout(() => {\n      setShowTick(false);\n      setCompletedTasks(prev => new Set([...prev, selectedTab]));\n      const nextTab = selectedTab + 1;\n      if (nextTab < tasks.length) {\n        handleTabClick(nextTab);\n      }\n    }, 1000);\n    setMediaURL('');\n    if (selectedTab === 1) {\n      setVideoBlob(null);\n    } else {\n      setAudioBlob(null);\n    }\n  } catch (error) {\n    console.error('Submission error:', error);\n    alert(error.message || 'Error uploading file. Please try again.');\n  } finally {\n    setIsSubmitting(false);\n  }\n};\nexport default handleSubmit;","map":{"version":3,"names":["calculateScore","config","handleSubmit","e","isSubmitting","setIsSubmitting","state","navigate","selectedTab","allSelectedAnswers","videoBlob","audioBlob","setShowTick","setCompletedTasks","tasks","handleTabClick","setMediaURL","setVideoBlob","setAudioBlob","preventDefault","console","log","patientId","name","age","alert","formData","FormData","append","scoreToSend","calculatedScore","toString","pair","entries","currentBlob","response","fetch","base_url","method","body","ok","errorData","json","Error","error","result","setTimeout","prev","Set","nextTab","length","message"],"sources":["/home/soham/aiims/my-app/src/handleSubmit.js"],"sourcesContent":["import { calculateScore } from './scoreUtils';\nimport config from './config.json';\n\nconst handleSubmit = async ({\n  e,\n  isSubmitting,\n  setIsSubmitting,\n  state,\n  navigate,\n  selectedTab,  \n  allSelectedAnswers,\n  videoBlob,\n  audioBlob,\n  setShowTick,\n  setCompletedTasks,\n  tasks,\n  handleTabClick,\n  setMediaURL,\n  setVideoBlob,\n  setAudioBlob\n}) => {  \n  e.preventDefault();\n  if (isSubmitting) {\n    console.log('Already submitting, returning');\n    return;\n  }\n    \n  console.log('Starting submission for tab:', selectedTab);\n  setIsSubmitting(true);\n    \n  try {\n    if (!state?.patientId || !state?.name || !state?.age) {\n      alert('Patient information is missing. Please start over.');\n      navigate('/');\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('name', state.name);\n    formData.append('age', state.age);\n    formData.append('patientId', state.patientId);\n    \n    // Initialize score as 0\n    let scoreToSend = '0';\n    \n    // Only calculate score for MMSE test (tab 2)\n    if (selectedTab === 2) {\n      const calculatedScore = calculateScore(allSelectedAnswers);\n      console.log('Tab 2: Calculated score:', calculatedScore);\n      scoreToSend = calculatedScore.toString();\n    } else {\n      console.log(`Tab ${selectedTab}: Using default score: 0`);\n    }\n    \n    console.log('Setting score in formData:', scoreToSend);\n    formData.append('score', scoreToSend);\n\n    // Log all form data being sent\n    console.log('Form data contents:');\n    for (let pair of formData.entries()) {\n      console.log(`${pair[0]}: ${pair[1]}`);\n    }\n\n    const currentBlob = selectedTab === 1 ? videoBlob : audioBlob;\n    if (!currentBlob) {\n      alert(`Please record ${selectedTab === 1 ? 'video' : 'audio'} before submitting.`);\n      setIsSubmitting(false);\n      return;\n    }\n\n    if (selectedTab === 1) {\n      formData.append('video', currentBlob, 'video.webm');\n    } else if (selectedTab === 0) {\n      formData.append('audio', currentBlob, 'audio.webm');\n    }\n\n    console.log('Sending request to server...');\n    const response = await fetch(`${config.base_url}/save`, {\n      method: 'POST',\n      body: formData,\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || 'Upload failed');\n    }\n\n    const result = await response.json();\n    console.log('Server response:', result);\n\n    setShowTick(true);\n    setTimeout(() => {\n      setShowTick(false);\n      setCompletedTasks((prev) => new Set([...prev, selectedTab]));\n      const nextTab = selectedTab + 1;\n      if (nextTab < tasks.length) {\n        handleTabClick(nextTab);\n      }\n    }, 1000);\n\n    setMediaURL('');\n    if (selectedTab === 1) {\n      setVideoBlob(null);\n    } else {\n      setAudioBlob(null);\n    }\n  } catch (error) {\n    console.error('Submission error:', error);\n    alert(error.message || 'Error uploading file. Please try again.');\n  } finally {\n    setIsSubmitting(false);\n  }\n};\n\nexport default handleSubmit;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}