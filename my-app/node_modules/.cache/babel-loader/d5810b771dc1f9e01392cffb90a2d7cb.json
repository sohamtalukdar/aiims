{"ast":null,"code":"var _jsxFileName = \"/home/soham/aiims/my-app/src/FileUploadForm.js\";\nimport React, { useState, useRef } from 'react';\nimport { useLocation } from 'react-router-dom';\nfunction FileUploadForm() {\n  const {\n    state\n  } = useLocation(); // Corrected to use useLocation to get state\n  const [selectedBlock, setSelectedBlock] = useState(0); // Track selected block\n  const [audio, setAudio] = useState(null); // Store the recorded audio file\n  const [isRecording, setIsRecording] = useState(false); // Track recording state\n  const [audioURL, setAudioURL] = useState(\"\"); // URL for the recorded audio\n  const mediaRecorderRef = useRef(null); // MediaRecorder for recording audio\n\n  const blocks = [{\n    id: 0,\n    title: 'Block 1',\n    paragraph: 'This is the paragraph for block 1.'\n  }, {\n    id: 1,\n    title: 'Block 2',\n    paragraph: 'This is the paragraph for block 2.'\n  }, {\n    id: 2,\n    title: 'Block 3',\n    paragraph: 'This is the paragraph for block 3.'\n  }];\n  const handleBlockClick = id => {\n    setSelectedBlock(id);\n  };\n  const handleAudioRecord = () => {\n    if (!isRecording) {\n      navigator.mediaDevices.getUserMedia({\n        audio: true\n      }).then(stream => {\n        const mediaRecorder = new MediaRecorder(stream);\n        mediaRecorderRef.current = mediaRecorder;\n        mediaRecorder.start();\n        setIsRecording(true);\n        let audioChunks = [];\n        mediaRecorder.addEventListener('dataavailable', event => {\n          audioChunks.push(event.data);\n        });\n        mediaRecorder.addEventListener('stop', () => {\n          const audioBlob = new Blob(audioChunks, {\n            type: 'audio/mpeg'\n          });\n          const audioFile = new File([audioBlob], 'audio.mp3', {\n            type: 'audio/mpeg'\n          });\n          setAudio(audioFile);\n          setAudioURL(URL.createObjectURL(audioBlob));\n          setIsRecording(false);\n        });\n      });\n    } else {\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n    }\n  };\n  const handleReRecord = () => {\n    setAudio(null);\n    setAudioURL(\"\");\n    handleAudioRecord(); // Restart recording\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append('name', state.name);\n    formData.append('age', state.age);\n    formData.append('audio', audio);\n    const response = await fetch('http://localhost:8000/upload/', {\n      method: 'POST',\n      body: formData\n    });\n    const result = await response.json();\n    console.log(result);\n    alert(`Uploaded successfully: Audio URL: ${result.audio_url}`);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"gradient-bg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"left-sidebar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, \"Select a Block\"), blocks.map(block => /*#__PURE__*/React.createElement(\"div\", {\n    key: block.id,\n    className: `block ${selectedBlock === block.id ? 'selected' : ''}`,\n    onClick: () => handleBlockClick(block.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, block.title))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, blocks[selectedBlock].title), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }, blocks[selectedBlock].paragraph), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"audio-controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, audioURL ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"audio\", {\n    src: audioURL,\n    controls: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleReRecord,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  }, \"Re-record\")) : /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleAudioRecord,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 15\n    }\n  }, isRecording ? 'Stop Recording' : 'Record Voice')), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    disabled: !audio,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, \"Upload\")))));\n}\nexport default FileUploadForm;","map":{"version":3,"names":["React","useState","useRef","useLocation","FileUploadForm","state","selectedBlock","setSelectedBlock","audio","setAudio","isRecording","setIsRecording","audioURL","setAudioURL","mediaRecorderRef","blocks","id","title","paragraph","handleBlockClick","handleAudioRecord","navigator","mediaDevices","getUserMedia","then","stream","mediaRecorder","MediaRecorder","current","start","audioChunks","addEventListener","event","push","data","audioBlob","Blob","type","audioFile","File","URL","createObjectURL","stop","handleReRecord","handleSubmit","e","preventDefault","formData","FormData","append","name","age","response","fetch","method","body","result","json","console","log","alert","audio_url","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","block","key","onClick","Fragment","src","controls","onSubmit","disabled"],"sources":["/home/soham/aiims/my-app/src/FileUploadForm.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nfunction FileUploadForm() {\n  const { state } = useLocation(); // Corrected to use useLocation to get state\n  const [selectedBlock, setSelectedBlock] = useState(0);  // Track selected block\n  const [audio, setAudio] = useState(null);  // Store the recorded audio file\n  const [isRecording, setIsRecording] = useState(false);  // Track recording state\n  const [audioURL, setAudioURL] = useState(\"\");  // URL for the recorded audio\n  const mediaRecorderRef = useRef(null);  // MediaRecorder for recording audio\n\n  const blocks = [\n    { id: 0, title: 'Block 1', paragraph: 'This is the paragraph for block 1.' },\n    { id: 1, title: 'Block 2', paragraph: 'This is the paragraph for block 2.' },\n    { id: 2, title: 'Block 3', paragraph: 'This is the paragraph for block 3.' },\n  ];\n\n  const handleBlockClick = (id) => {\n    setSelectedBlock(id);\n  };\n\n  const handleAudioRecord = () => {\n    if (!isRecording) {\n      navigator.mediaDevices.getUserMedia({ audio: true })\n        .then((stream) => {\n          const mediaRecorder = new MediaRecorder(stream);\n          mediaRecorderRef.current = mediaRecorder;\n          mediaRecorder.start();\n          setIsRecording(true);\n\n          let audioChunks = [];\n          mediaRecorder.addEventListener('dataavailable', (event) => {\n            audioChunks.push(event.data);\n          });\n\n          mediaRecorder.addEventListener('stop', () => {\n            const audioBlob = new Blob(audioChunks, { type: 'audio/mpeg' });\n            const audioFile = new File([audioBlob], 'audio.mp3', { type: 'audio/mpeg' });\n            setAudio(audioFile);\n            setAudioURL(URL.createObjectURL(audioBlob));\n            setIsRecording(false);\n          });\n        });\n    } else {\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n    }\n  };\n\n  const handleReRecord = () => {\n    setAudio(null);\n    setAudioURL(\"\");\n    handleAudioRecord();  // Restart recording\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const formData = new FormData();\n    formData.append('name', state.name);\n    formData.append('age', state.age);\n    formData.append('audio', audio);\n\n    const response = await fetch('http://localhost:8000/upload/', {\n      method: 'POST',\n      body: formData\n    });\n\n    const result = await response.json();\n    console.log(result);\n    alert(`Uploaded successfully: Audio URL: ${result.audio_url}`);\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"gradient-bg\"></div>\n      <div className=\"container\">\n        <div className=\"left-sidebar\">\n          <h2>Select a Block</h2>\n          {blocks.map((block) => (\n            <div\n              key={block.id}\n              className={`block ${selectedBlock === block.id ? 'selected' : ''}`}\n              onClick={() => handleBlockClick(block.id)}\n            >\n              {block.title}\n            </div>\n          ))}\n        </div>\n        \n        <div className=\"content\">\n          <h1>{blocks[selectedBlock].title}</h1>\n          <p>{blocks[selectedBlock].paragraph}</p>\n          \n          <div className=\"audio-controls\">\n            {audioURL ? (\n              <>\n                <audio src={audioURL} controls />\n                <button onClick={handleReRecord}>Re-record</button>\n              </>\n            ) : (\n              <button onClick={handleAudioRecord}>\n                {isRecording ? 'Stop Recording' : 'Record Voice'}\n              </button>\n            )}\n          </div>\n\n          <form onSubmit={handleSubmit}>\n            <button type=\"submit\" disabled={!audio}>Upload</button>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default FileUploadForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}