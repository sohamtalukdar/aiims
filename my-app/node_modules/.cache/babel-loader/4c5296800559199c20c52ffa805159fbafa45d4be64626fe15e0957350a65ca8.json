{"ast":null,"code":"import { calculateScore } from './scoreUtils';\nconst handleSubmit = async e => {\n  e.preventDefault();\n  if (isSubmitting) {\n    console.log('Already submitting, returning');\n    return;\n  }\n  console.log('Starting submission for tab:', selectedTab);\n  setIsSubmitting(true);\n  try {\n    var _state, _state2, _state3;\n    if (!((_state = state) !== null && _state !== void 0 && _state.patientId) || !((_state2 = state) !== null && _state2 !== void 0 && _state2.name) || !((_state3 = state) !== null && _state3 !== void 0 && _state3.age)) {\n      alert('Patient information is missing. Please start over.');\n      navigate('/');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('name', state.name);\n    formData.append('age', state.age);\n    formData.append('patientId', state.patientId);\n\n    // Initialize score as 0\n    let scoreToSend = '0';\n\n    // Only calculate score for MMSE test (tab 2)\n    if (selectedTab === 2) {\n      const calculatedScore = calculateScore(allSelectedAnswers);\n      console.log('Tab 2: Calculated score:', calculatedScore);\n      scoreToSend = calculatedScore.toString();\n    } else {\n      console.log(`Tab ${selectedTab}: Using default score: 0`);\n    }\n    console.log('Setting score in formData:', scoreToSend);\n    formData.append('score', scoreToSend);\n\n    // Log all form data being sent\n    console.log('Form data contents:');\n    for (let pair of formData.entries()) {\n      console.log(`${pair[0]}: ${pair[1]}`);\n    }\n    const currentBlob = selectedTab === 1 ? videoBlob : audioBlob;\n    if (!currentBlob) {\n      alert(`Please record ${selectedTab === 1 ? 'video' : 'audio'} before submitting.`);\n      setIsSubmitting(false);\n      return;\n    }\n    if (selectedTab === 1) {\n      formData.append('video', currentBlob, 'video.webm');\n    } else if (selectedTab === 0) {\n      formData.append('audio', currentBlob, 'audio.webm');\n    }\n    console.log('Sending request to server...');\n    const response = await fetch('http://localhost:5001/save', {\n      method: 'POST',\n      body: formData\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || 'Upload failed');\n    }\n    const result = await response.json();\n    console.log('Server response:', result);\n    setShowTick(true);\n    setTimeout(() => {\n      setShowTick(false);\n      setCompletedTasks(prev => new Set([...prev, selectedTab]));\n      const nextTab = selectedTab + 1;\n      if (nextTab < tasks.length) {\n        handleTabClick(nextTab);\n      }\n    }, 1000);\n    setMediaURL('');\n    if (selectedTab === 1) {\n      setVideoBlob(null);\n    } else {\n      setAudioBlob(null);\n    }\n  } catch (error) {\n    console.error('Submission error:', error);\n    alert(error.message || 'Error uploading file. Please try again.');\n  } finally {\n    setIsSubmitting(false);\n  }\n};\nexport default handleSubmit;","map":{"version":3,"names":["calculateScore","handleSubmit","e","preventDefault","isSubmitting","console","log","selectedTab","setIsSubmitting","_state","_state2","_state3","state","patientId","name","age","alert","navigate","formData","FormData","append","scoreToSend","calculatedScore","allSelectedAnswers","toString","pair","entries","currentBlob","videoBlob","audioBlob","response","fetch","method","body","ok","errorData","json","Error","error","result","setShowTick","setTimeout","setCompletedTasks","prev","Set","nextTab","tasks","length","handleTabClick","setMediaURL","setVideoBlob","setAudioBlob","message"],"sources":["/home/soham/aiims/my-app/src/handleSubmit.js"],"sourcesContent":["import { calculateScore } from './scoreUtils';\n\nconst handleSubmit = async (e) => {\n    e.preventDefault();\n    if (isSubmitting) {\n        console.log('Already submitting, returning');\n        return;\n    }\n    \n    console.log('Starting submission for tab:', selectedTab);\n    setIsSubmitting(true);\n    \n    try {\n        if (!state?.patientId || !state?.name || !state?.age) {\n            alert('Patient information is missing. Please start over.');\n            navigate('/');\n            return;\n        }\n\n        const formData = new FormData();\n        formData.append('name', state.name);\n        formData.append('age', state.age);\n        formData.append('patientId', state.patientId);\n        \n        // Initialize score as 0\n        let scoreToSend = '0';\n        \n        // Only calculate score for MMSE test (tab 2)\n        if (selectedTab === 2) {\n            const calculatedScore = calculateScore(allSelectedAnswers);\n            console.log('Tab 2: Calculated score:', calculatedScore);\n            scoreToSend = calculatedScore.toString();\n        } else {\n            console.log(`Tab ${selectedTab}: Using default score: 0`);\n        }\n        \n        console.log('Setting score in formData:', scoreToSend);\n        formData.append('score', scoreToSend);\n\n        // Log all form data being sent\n        console.log('Form data contents:');\n        for (let pair of formData.entries()) {\n            console.log(`${pair[0]}: ${pair[1]}`);\n        }\n\n        const currentBlob = selectedTab === 1 ? videoBlob : audioBlob;\n        if (!currentBlob) {\n            alert(`Please record ${selectedTab === 1 ? 'video' : 'audio'} before submitting.`);\n            setIsSubmitting(false);\n            return;\n        }\n\n        if (selectedTab === 1) {\n            formData.append('video', currentBlob, 'video.webm');\n        } else if (selectedTab === 0) {\n            formData.append('audio', currentBlob, 'audio.webm');\n        }\n\n        console.log('Sending request to server...');\n        const response = await fetch('http://localhost:5001/save', {\n            method: 'POST',\n            body: formData,\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.error || 'Upload failed');\n        }\n\n        const result = await response.json();\n        console.log('Server response:', result);\n\n        setShowTick(true);\n        setTimeout(() => {\n            setShowTick(false);\n            setCompletedTasks((prev) => new Set([...prev, selectedTab]));\n            const nextTab = selectedTab + 1;\n            if (nextTab < tasks.length) {\n                handleTabClick(nextTab);\n            }\n        }, 1000);\n\n        setMediaURL('');\n        if (selectedTab === 1) {\n            setVideoBlob(null);\n        } else {\n            setAudioBlob(null);\n        }\n    } catch (error) {\n        console.error('Submission error:', error);\n        alert(error.message || 'Error uploading file. Please try again.');\n    } finally {\n        setIsSubmitting(false);\n    }\n};\n\nexport default handleSubmit;"],"mappings":"AAAA,SAASA,cAAc,QAAQ,cAAc;AAE7C,MAAMC,YAAY,GAAG,MAAOC,CAAC,IAAK;EAC9BA,CAAC,CAACC,cAAc,CAAC,CAAC;EAClB,IAAIC,YAAY,EAAE;IACdC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;IAC5C;EACJ;EAEAD,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEC,WAAW,CAAC;EACxDC,eAAe,CAAC,IAAI,CAAC;EAErB,IAAI;IAAA,IAAAC,MAAA,EAAAC,OAAA,EAAAC,OAAA;IACA,IAAI,GAAAF,MAAA,GAACG,KAAK,cAAAH,MAAA,eAALA,MAAA,CAAOI,SAAS,KAAI,GAAAH,OAAA,GAACE,KAAK,cAAAF,OAAA,eAALA,OAAA,CAAOI,IAAI,KAAI,GAAAH,OAAA,GAACC,KAAK,cAAAD,OAAA,eAALA,OAAA,CAAOI,GAAG,GAAE;MAClDC,KAAK,CAAC,oDAAoD,CAAC;MAC3DC,QAAQ,CAAC,GAAG,CAAC;MACb;IACJ;IAEA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAER,KAAK,CAACE,IAAI,CAAC;IACnCI,QAAQ,CAACE,MAAM,CAAC,KAAK,EAAER,KAAK,CAACG,GAAG,CAAC;IACjCG,QAAQ,CAACE,MAAM,CAAC,WAAW,EAAER,KAAK,CAACC,SAAS,CAAC;;IAE7C;IACA,IAAIQ,WAAW,GAAG,GAAG;;IAErB;IACA,IAAId,WAAW,KAAK,CAAC,EAAE;MACnB,MAAMe,eAAe,GAAGtB,cAAc,CAACuB,kBAAkB,CAAC;MAC1DlB,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEgB,eAAe,CAAC;MACxDD,WAAW,GAAGC,eAAe,CAACE,QAAQ,CAAC,CAAC;IAC5C,CAAC,MAAM;MACHnB,OAAO,CAACC,GAAG,CAAC,OAAOC,WAAW,0BAA0B,CAAC;IAC7D;IAEAF,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEe,WAAW,CAAC;IACtDH,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEC,WAAW,CAAC;;IAErC;IACAhB,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IAClC,KAAK,IAAImB,IAAI,IAAIP,QAAQ,CAACQ,OAAO,CAAC,CAAC,EAAE;MACjCrB,OAAO,CAACC,GAAG,CAAC,GAAGmB,IAAI,CAAC,CAAC,CAAC,KAAKA,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;IACzC;IAEA,MAAME,WAAW,GAAGpB,WAAW,KAAK,CAAC,GAAGqB,SAAS,GAAGC,SAAS;IAC7D,IAAI,CAACF,WAAW,EAAE;MACdX,KAAK,CAAC,iBAAiBT,WAAW,KAAK,CAAC,GAAG,OAAO,GAAG,OAAO,qBAAqB,CAAC;MAClFC,eAAe,CAAC,KAAK,CAAC;MACtB;IACJ;IAEA,IAAID,WAAW,KAAK,CAAC,EAAE;MACnBW,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEO,WAAW,EAAE,YAAY,CAAC;IACvD,CAAC,MAAM,IAAIpB,WAAW,KAAK,CAAC,EAAE;MAC1BW,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEO,WAAW,EAAE,YAAY,CAAC;IACvD;IAEAtB,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAC3C,MAAMwB,QAAQ,GAAG,MAAMC,KAAK,CAAC,4BAA4B,EAAE;MACvDC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEf;IACV,CAAC,CAAC;IAEF,IAAI,CAACY,QAAQ,CAACI,EAAE,EAAE;MACd,MAAMC,SAAS,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,KAAK,IAAI,eAAe,CAAC;IACvD;IAEA,MAAMC,MAAM,GAAG,MAAMT,QAAQ,CAACM,IAAI,CAAC,CAAC;IACpC/B,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEiC,MAAM,CAAC;IAEvCC,WAAW,CAAC,IAAI,CAAC;IACjBC,UAAU,CAAC,MAAM;MACbD,WAAW,CAAC,KAAK,CAAC;MAClBE,iBAAiB,CAAEC,IAAI,IAAK,IAAIC,GAAG,CAAC,CAAC,GAAGD,IAAI,EAAEpC,WAAW,CAAC,CAAC,CAAC;MAC5D,MAAMsC,OAAO,GAAGtC,WAAW,GAAG,CAAC;MAC/B,IAAIsC,OAAO,GAAGC,KAAK,CAACC,MAAM,EAAE;QACxBC,cAAc,CAACH,OAAO,CAAC;MAC3B;IACJ,CAAC,EAAE,IAAI,CAAC;IAERI,WAAW,CAAC,EAAE,CAAC;IACf,IAAI1C,WAAW,KAAK,CAAC,EAAE;MACnB2C,YAAY,CAAC,IAAI,CAAC;IACtB,CAAC,MAAM;MACHC,YAAY,CAAC,IAAI,CAAC;IACtB;EACJ,CAAC,CAAC,OAAOb,KAAK,EAAE;IACZjC,OAAO,CAACiC,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IACzCtB,KAAK,CAACsB,KAAK,CAACc,OAAO,IAAI,yCAAyC,CAAC;EACrE,CAAC,SAAS;IACN5C,eAAe,CAAC,KAAK,CAAC;EAC1B;AACJ,CAAC;AAED,eAAeP,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}